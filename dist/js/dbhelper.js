class DBHelper{static openDatabase(){return navigator.serviceWorker?idb.open("restaurant",1,e=>{e.createObjectStore("restaurants",{keyPath:"id"})}):Promise.resolve()}static openReviewDatabase(e){return navigator.serviceWorker?idb.open(e,1,e=>{e.createObjectStore("reviews",{keyPath:"id",autoIncrement:!0})}):Promise.resolve()}static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static fillReviewDatabase(e){if(e)return fetch(`http://localhost:1337/reviews?restaurant_id=${e}`).then(e=>e.json()).then(t=>(DBHelper.openReviewDatabase(e).then(e=>{if(!e)return;const r=e.transaction("reviews","readwrite"),a=r.objectStore("reviews");return t.forEach(e=>{a.put(e)}),r.complete}),DBHelper.getReviewFromDatabase(e))).catch(e=>e)}static fillRestaurantDatabase(){return fetch(DBHelper.DATABASE_URL).then(e=>e.json()).then(e=>(DBHelper.openDatabase().then(t=>{if(!t)return;const r=t.transaction("restaurants","readwrite"),a=r.objectStore("restaurants");return e.forEach(e=>{a.put(e)}),r.complete}),DBHelper.getFromDatabase())).catch(e=>e)}static getFromDatabase(){return DBHelper.openDatabase().then(e=>e.transaction("restaurants").objectStore("restaurants").getAll())}static getReviewFromDatabase(e){return DBHelper.openReviewDatabase(e).then(e=>e.transaction("reviews").objectStore("reviews").getAll())}static fetchRestaurants(){return DBHelper.getFromDatabase()}static fetchReviews(){return DBHelper.getReviewFromDatabase()}static fetchRestaurantById(e){return DBHelper.fetchRestaurants().then(t=>{const r=t.find(t=>t.id==e);return r||"Restaurant does not exist"}).catch(e=>e)}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t){return DBHelper.fetchRestaurants().then(r=>{let a=r;return"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),a})}static fetchNeighborhoods(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].neighborhood);return t.filter((e,r)=>t.indexOf(e)==r)}).catch(e=>e)}static fetchCuisines(){return DBHelper.fetchRestaurants().then(e=>{const t=e.map((t,r)=>e[r].cuisine_type);return t.filter((e,r)=>t.indexOf(e)==r)}).catch(e=>e)}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/images/${e.id}`}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(newMap),r}static picturesForRestaurant(e,t){const r=document.createElement("source");r.srcset=`/images/${e.id}-large.webp`,r.media="(min-width: 860px)",t.append(r);const a=document.createElement("source");a.srcset=`/images/${e.id}-medium.webp`,a.media="(min-width: 450px)",t.append(a);const n=document.createElement("img");n.className="restaurant-img",n.src=`${DBHelper.imageUrlForRestaurant(e)}.webp`,n.alt=`${e.name}'s restaurant picture`,t.append(n)}static registerServiceWorker(){"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/sw.js").then(function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)},function(e){console.log("ServiceWorker registration failed: ",e)})})}}